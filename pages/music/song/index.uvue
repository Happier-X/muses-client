<template>
    <view class="flex-1">
        <m-navbar title="歌曲"></m-navbar>
        <view class="flex-1 min-h-0">
            <view class="flex-row p-[16px]">
                <image class="size-[120px] rounded-[8px]" src="https://cdn.pixabay.com/photo/2019/11/07/13/45/meditation-4608914_1280.jpg"></image>
                <view class="pl-[16px]">
                    <text class="font-bold">全部歌曲</text>
                    <text class="font-normal">共0首</text>
                </view>
            </view>
            <list-view class="flex-1 min-h-0" :bounces="false" :show-scrollbar="false" :refresher-enabled="true" :refresher-triggered="refresherTriggered" @refresherrefresh="handleRefresh" :lower-threshold="360" @scrolltolower="handleLoadMore">
                <list-item v-for="item in list" :key="item.id" class="h-[72px] flex-row items-center justify-between p-[16px]" @tap="handlePlaySong(item)" @longpress="handleShowAction(item)">
                    <image class="size-[48px] rounded-[8px]" :src="`${serviceUrl}${item.cover}`"></image>
                    <view class="px-[16px] flex-1">
                        <text class="font-bold">{{ item.title }}</text>
                        <text class="font-normal">{{ item.artist }}</text>
                    </view>
                    <m-icon name="f066" @tap.stop="handleShowAction(item)"></m-icon>
                </list-item>
                <list-item v-if="reachedBottom && noMore" class="h-[48px] flex-center">
                    <text>{{ noMore ? '没有更多了' : '加载中...' }}</text>
                </list-item>
            </list-view>
        </view>
        <view class="h-[72px]"></view>
        <share-element class="w-full h-[72px] fixed bottom-0" share-key="playBar" :transitionOnGesture="true">
            <m-play-bar></m-play-bar>
        </share-element>
    </view>
</template>
<script setup lang="uts">
import MNavbar from '@/components/MNavbar.uvue'
import MPlayBar from '@/components/MPlayBar.uvue'
import MIcon from '@/components/MIcon.uvue'
import { getSongs } from '@/api/songs';
import { parseToObject } from '@/utils/parse';
import { playerLoadSong, playerPlay } from '@/stores/player.uts'
import { addAllSongsToPlayQueue } from '../../../api/playQueue';

const list = ref<UTSJSONObject[]>([]);

const searchParams = ref<UTSJSONObject>({
    page: 1,
    size: 20,
})
const loading = ref(false);
const noMore = ref(false);
const refresherTriggered = ref(false);
const reachedBottom = ref(false);
const handleGetList = async (isRefresh: boolean) => {
    if(loading.value) return;
    loading.value = true;
    if(isRefresh) list.value = [];
    try{
        const res = await getSongs(searchParams.value)
        const resData = parseToObject(res.data);
        list.value = list.value.concat(resData.items as UTSJSONObject[]);
        const paginationData = parseToObject(resData.pagination);
        if((paginationData.total as number) <= list.value.length){
            noMore.value = true;
        }else{
            noMore.value = false;
        }
        if(!noMore.value) searchParams.value.page = (searchParams.value.page as number) + 1;
    }catch(error){
        console.error('获取歌曲列表失败', error)
    }finally{
        loading.value = false;
        refresherTriggered.value = false;
    }
}

onLoad(() => {
    handleGetList(true);
})

const handleRefresh = ( )=> {
    refresherTriggered.value = true;
    searchParams.value.page = 1;
    handleGetList(true);
}
const handleLoadMore = () => {
    if(noMore.value || loading.value) return;
    reachedBottom.value = true;
    handleGetList(false);
}
const serviceUrl = computed(()=>uni.getStorageSync("serviceUrl") ?? "")

const handlePlaySong = async(item:UTSJSONObject)=>{
    try{
        await playerLoadSong(item.id as string)
    }catch(error){
        console.error("加载歌曲失败",error)
    }
    playerPlay()
    try{
        await addAllSongsToPlayQueue()
    }catch(error){
        console.error("添加全部歌曲到播放队列失败",error)
    }
}

const handleShowAction = async(item:UTSJSONObject)=>{
    console.log((1111,item))
}
</script>