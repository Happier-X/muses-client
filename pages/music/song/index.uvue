<template>
    <view class="m-page">
        <m-navbar title="歌曲"></m-navbar>
        <view class="song-container">
            <!-- <view class="flex-row p-[16px]">
                <image class="size-[120px] rounded-[8px]" src="https://cdn.pixabay.com/photo/2019/11/07/13/45/meditation-4608914_1280.jpg"></image>
                <view class="pl-[16px]">
                    <text class="font-bold">全部歌曲</text>
                    <text class="font-normal">共0首</text>
                </view>
            </view> -->
            <z-paging-x class="song-list" ref="pagingXRef" v-model="list" @query="queryList" :refresher-threshold="50" :show-back-to-top="true" :default-page-size="20" :rebound="false" :show-scrollbar="false">
                <list-item v-for="item in list" :key="item.id" class="song-item" @tap="handlePlaySong(item)" @longpress="handleShowAction(item)">
                    <image class="cover" :src="`${serviceUrl}${item.cover}`"></image>
                    <view class="info">
                        <text>{{ item.title }}</text>
                        <text>{{ item.artist }}</text>
                    </view>
                    <m-icon name="f066" @tap.stop="handleShowAction(item)"></m-icon>
                </list-item>
            </z-paging-x>
        </view>
        <view class="bottom-placeholder"></view>
        <share-element class="bottom-share-element" share-key="playBar" :transitionOnGesture="true">
            <m-play-bar></m-play-bar>
        </share-element>
    </view>
</template>
<script setup lang="uts">
import MIcon from '@/components/ui/MIcon.uvue'
import MNavbar from '@/components/ui/MNavbar.uvue'
import MPlayBar from '@/components/MPlayBar.uvue'
import { getSongs } from '@/api/songs';
import { parseToObject } from '@/utils/parse';
import { playerLoadSong, playerPlay } from '@/stores/player.uts'
import { addAllSongsToPlayQueue } from '../../../api/playQueue';

const instance = getCurrentInstance()!.proxy!
const list = ref<UTSJSONObject[]>([]);

const queryList = async (pageNo:number,pageSize:number) => {
    const params = {
        page: pageNo,
        size: pageSize
    }
    try{
        const res = await getSongs(params);
        const resData = parseToObject(res.data);
        (instance.$refs['pagingXRef'] as ZPagingXComponentPublicInstance)?.$callMethod('complete', resData.items as UTSJSONObject[]);
    }catch(error){
        (instance.$refs['pagingXRef'] as ZPagingXComponentPublicInstance)?.$callMethod('completeByError');
        console.error('获取歌曲列表失败', error);
    }
}
const serviceUrl = computed(()=>uni.getStorageSync("serviceUrl") ?? "")

const handlePlaySong = async(item:UTSJSONObject)=>{
    try{
        await playerLoadSong(item.id as string)
    }catch(error){
        console.error("加载歌曲失败",error)
    }
    playerPlay()
    try{
        await addAllSongsToPlayQueue()
    }catch(error){
        console.error("添加全部歌曲到播放队列失败",error)
    }
}

const handleShowAction = async(item:UTSJSONObject)=>{
    console.log((1111,item))
}
</script>
<style lang="scss">
    .song-container{
        flex: 1;
        min-height: 0;
    }
    .song-list{
        flex: 1;
        min-height: 0;
        .song-item{
            height: 72px;
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
            padding: 16px;
            .cover{
                width: 48px;
                height: 48px;
                border-radius: 8px;
            }
            .info{
                flex: 1;
                padding: 0 16px;
            }
        }
    }
    .bottom-placeholder {
        height: 72px;
    }
    .bottom-share-element {
        width: 100%;
        height: 72px;
        position: fixed;
        bottom: 0px;
    }
</style>