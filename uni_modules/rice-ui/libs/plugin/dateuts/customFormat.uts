// import { local } from "./locale.uts"
// import { Dateuts } from "./index.uts"
// import { DateParams } from "./type.uts";

// const formattingTokens = /(A|a|Q|YYYY|YY?|ww?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g

// const match1 = /\d/ // 0 - 9
// const match2 = /\d\d/ // 00 - 99
// const match3 = /\d{3}/ // 000 - 999
// const match4 = /\d{4}/ // 0000 - 9999
// const match1to2 = /\d\d?/ // 0 - 99
// const matchSigned = /[+-]?\d+/ // -inf - inf
// const matchOffset = /[+-]\d\d:?(\d\d)?|Z/ // +00:00 -00:00 +0000 or -0000 +00 or Z
// const matchWord = /\d*[^-_:/,()\s\d]+/ // Word

// const addInput = function (property : string) {
// 	return function (input) {
// 		this[property] = +input
// 	}
// }

// let parseTwoDigitYear = function (input : string | number) {
// 	input = typeof (input) == 'string' ? parseFloat(input) : input
// 	return input + (input > 68 ? 1900 : 2000)
// }


// const expressions = {
// 	Q: [match1, function (input : number) {
// 		this.month = ((input - 1) * 3) + 1
// 	}],
// 	S: [match1, function (input : number) {
// 		this.milliseconds = input * 100
// 	}],
// 	SS: [match2, function (input : number) {
// 		this.milliseconds = input * 10
// 	}],
// 	SSS: [match3, function (input : number) {
// 		this.milliseconds = input
// 	}],
// 	s: [match1to2, addInput('seconds')],
// 	ss: [match1to2, addInput('seconds')],
// 	m: [match1to2, addInput('minutes')],
// 	mm: [match1to2, addInput('minutes')],
// 	H: [match1to2, addInput('hours')],
// 	h: [match1to2, addInput('hours')],
// 	HH: [match1to2, addInput('hours')],
// 	hh: [match1to2, addInput('hours')],
// 	D: [match1to2, addInput('day')],
// 	DD: [match2, addInput('day')],

// 	w: [match1to2, addInput('week')],
// 	ww: [match2, addInput('week')],
// 	M: [match1to2, addInput('month')],
// 	MM: [match2, addInput('month')],
// 	MMM: [matchWord, function (input : string) {
// 		const months = local.months
// 		const monthsShort = local.monthsShort
// 		const matchIndex = (monthsShort || months.map(_ => _.slice(0, 3))).indexOf(input) + 1
// 		this.month = (matchIndex % 12) || matchIndex
// 	}],
// 	MMMM: [matchWord, function (input : string) {
// 		const months = local.months
// 		const matchIndex = months.indexOf(input) + 1
// 		if (matchIndex < 1) {
// 			throw new Error()
// 		}
// 		this.month = (matchIndex % 12) || matchIndex
// 	}],
// 	Y: [matchSigned, addInput('year')],
// 	YY: [match2, function (input : string) {
// 		this.year = parseTwoDigitYear(input)
// 	}],
// 	YYYY: [match4, addInput('year')],
// }




// export const t = (format : string) =>
// 	format.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (_, a, b) => a || b.slice(1))

// export const englishFormats = {
// 	LTS: 'h:mm:ss A',
// 	LT: 'h:mm A',
// 	L: 'MM/DD/YYYY',
// 	LL: 'MMMM D, YYYY',
// 	LLL: 'MMMM D, YYYY h:mm A',
// 	LLLL: 'dddd, MMMM D, YYYY h:mm A'
// }

// export const u = (formatStr : string) : string => {
// 	console.log('formatStr', formatStr)
// 	return formatStr.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (_, a ?: string, b ?: string) => {
// 		return (a as string | null) ?? englishFormats[b ?? 'LTS']
// 	})
// }

// export const maekParser = (format : string) => {
// 	// format = u(format)
// 	let array = format.match(formattingTokens)
// 	if (array == null) return
// 	console.log('arr', array)
// 	for (let i = 0; i < array.length; i++) {
// 		const token = array[i]!
// 		const parseTo = expressions[token] as (any[] | null)
// 		console.log('parseTo', parseTo)
// 		const regex = parseTo != null ? parseTo[0] : null
// 		const parser = (parseTo != null && parseTo.length >= 2) ? parseTo[1] : null
// 		if (parser != null) {
// 			array[i] = { regex, parser }
// 		} else {

// 		}
// 	}
// }

// // custom format

// export const parseCustomFormat = (params : DateParams) : Date => {
// 	const format = params.customFormat!
// 	const date = params.date
// 	// 时间戳秒：X，时间戳毫秒：x
// 	if ((format == 'x' || format == 'X') && typeof date == 'number') {
// 		//秒转成毫秒
// 		const t = (format == 'X' ? 1000 : 1) * date
// 		return new Date(t)
// 	}
// 	const parser = maekParser(format)
// 	return new Date()
// }