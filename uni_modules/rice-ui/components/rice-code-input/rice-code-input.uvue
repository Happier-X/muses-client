<template>
	<view :class="codeInputClass" :style="[codeInputStyle,customStyle]">
		<view v-for="(_,index) in maxlength" :key="index" :style="[boxStyle,getBoxStyle(index)]" :class="boxClass">
			<view v-if="dot&&displayValue.length>index" class="rice-code-input__box__dot"></view>
			<text v-else class="rice-code-input__box__text" :style="textStyle">{{getCodeNum(index)}}</text>
			<view v-show="showCursor&&index==displayValue.length&&isFocus" class="rice-code-input__box__line" ref="boxLineRef"
				:style="boxLineStyle"></view>
		</view>
		<input class="rice-code-input__input" type="number" :disabled="disabledKeyboard" :value="displayValue"
			:style="inputStyle" :focus="focus" :maxlength="maxlength" :adjust-position="adjustPosition" @input="onInput"
			@focus="onFocus" @blur="onBlur"></input>
	</view>
</template>

<script setup>
	/**
 * @description CodeInput 验证码输入框
 * @property {String} modelValue 双向绑定的值
 * @property {Number} maxlength 输入字符的个数，默认4
 * @property {Boolean} dot 是否使用原点代替
 * @property {String} mode 模式选择
 * @value box 输入框（默认值）
 * @value line 下划线
 * @property {String} bgColor 输入框背景色，传transparent可设置为透明色
 * @property {String} borderColor 输入框边框颜色，传transparent可设置为透明色
 * @property {Boolean} showCursor 是否显示输入框中间的竖线，默认true
 * @property {String} cursorColor 输入框中间竖线的颜色
 * @property {String|Number} space 输入框之间的间距
 * @property {String}  justifyContent 等同于css属性 `justify-content` 的值
 * @property {String|Number} size 输入框大小，宽高一致
 * @property {String|Number} fontSize 文字大小
 * @property {String} color 文字颜色
 * @property {Boolean} bold 文字是否加粗
 * @property {Boolean} focus 是否获得焦点
 * @property {Boolean} disabledKeyboard 点击输入框禁止唤起系统键盘，一般用于自定义键盘，目前RiceUI还没有自定义键盘组件，后续支持
 * @property {Boolean} adjustPosition 键盘弹起时，是否自动上推页面，默认true
 * @property {Object} customStyle 自定义样式
 */
	import { addUnit, hasStrValue, getPxNum } from "../../libs/utils";
	import { useNamespace } from "../../libs/use";
	import { CodeInputProps } from "./type.uts"

	const ns = useNamespace('code-input')
	const emit = defineEmits<{
		finish : [value: string],
		change : [value: string],
		focus : [e: UniInputFocusEvent],
		blur : [e: UniInputBlurEvent],
	}>()
	const props = withDefaults(defineProps<CodeInputProps>(), {
		maxlength: 4,
		dot: false,
		mode: 'box',
		showCursor: true,
		space: '10px',
		focus: false,
		disabledKeyboard: false,
		adjustPosition: true,
		customStyle: () : UTSJSONObject => ({})
	})

	const modelValue = defineModel({
		type: String,
	})

	const displayValue = ref("")
	const isFocus = ref(props.focus)

	const getCodeNum = (index : number) => displayValue.value.charAt(index)

	watch(modelValue, (newVal : string | null) => {
		if (newVal != null) {
			if (newVal != displayValue.value) {
				displayValue.value = newVal!.substring(0, props.maxlength)
			}
		} else {
			displayValue.value = ""
		}

	}, {
		immediate: true
	})



	// #ifdef APP
	const boxLineRef = shallowRef<UniElement[]>([])

	const startAmination = (value : string) => {
		const len = value.length
		if (len < boxLineRef.value.length) {
			boxLineRef.value[len].animate([{
				opacity: '0',
			}, {
				opacity: '1',
			}, {
				opacity: '0',
			}], {
				duration: 1000,
				// #ifndef APP-HARMONY
				iterations: Infinity
				// #endif
				// #ifdef APP-HARMONY
				iterations: 99999
				// #endif
			})
		}
	}

	// #endif

	const onInput = (e : UniInputEvent) => {
		const value = e.detail.value
		const newVal = value.substring(0, props.maxlength)
		modelValue.value = newVal
		displayValue.value = newVal
		emit('change', newVal)
		if (value.length >= props.maxlength) {
			emit('finish', newVal)
		}

		// #ifdef APP
		startAmination(newVal)
		// #endif

	}

	const onFocus = (e : UniInputFocusEvent) => {
		isFocus.value = true
		// #ifdef APP
		startAmination(displayValue.value)
		// #endif
		emit('focus', e)
	}

	const onBlur = (e : UniInputBlurEvent) => {
		isFocus.value = false
		emit('blur', e)
	}

	const codeInputClass = computed(() => {
		return [
			ns.b(""),
			ns.theme(),
		]
	})

	const codeInputStyle = computed(() => {
		const css = new Map<string, string>()
		if (hasStrValue(props.justifyContent)) {
			css.set('justify-content', props.justifyContent!)
		}
		return css
	})

	const boxStyle = computed(() => {
		const css = new Map<string, string>()
		if (hasStrValue(props.bgColor) && props.mode != 'line') {
			css.set('background-color', props.bgColor!)
		}
		if (hasStrValue(props.borderColor)) {
			css.set('border-color', props.borderColor!)
		}
		if (props.size != null) {
			css.set('height', addUnit(props.size!))
			css.set('width', addUnit(props.size!))
		}
		return css
	})


	const getBoxStyle = (index : number) => {
		const css = new Map<string, string>()
		const space = getPxNum(props.space)
		if (index == props.maxlength - 1) {
			css.set('margin-right', '0px')
		} else {
			css.set('margin-right', addUnit(props.space)!)
		}
		//边距为0，设置第一个盒子和最后一个盒子的圆角就行
		if (space == 0) {
			if (index == 0 && props.mode != 'line') {
				css.set('border-top-left-radius', '4px')
				css.set('border-bottom-left-radius', '4px')
			}
			if (index == props.maxlength - 1 && props.mode != 'line') {
				css.set('border-top-right-radius', '4px')
				css.set('border-bottom-right-radius', '4px')
			}
			if (index != props.maxlength - 1) {
				css.set('borderRight', 'none')
			}
		}

		return css
	}

	const boxClass = computed(() => {
		const basic = [ns.e('box')]
		if (getPxNum(props.space) != 0) {
			basic.push(ns.e('box--radius'))
		}
		if (props.mode == 'line') {
			basic.push(ns.e('box--line'))
		}
		return basic
	})

	const inputStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.size != null) css.set('height', addUnit(props.size!))
		return css
	})

	const textStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.bold == true) css.set('font-weight', 'bold')
		if (hasStrValue(props.color)) css.set('color', props.color!)
		if (props.fontSize != null) css.set('font-size', addUnit(props.fontSize!))
		return css
	})

	const boxLineStyle = computed(() => {
		const css = new Map<string, string>()
		if (hasStrValue(props.cursorColor)) css.set('background-color', props.cursorColor!)
		return css
	})
</script>

<style scoped lang="scss">
	.rice-code-input {
		position: relative;
		flex-direction: row;
		align-items: center;
		flex-wrap: wrap;

		&__box {
			position: relative;
			flex-direction: row;
			align-items: center;
			justify-content: center;
			background-color: var(--rice-code-input-background);
			height: 42px;
			width: 42px;
			border: 1px solid var(--rice-code-input-background);

			&__text {
				font-size: var(--rice-font-size-md);
				color: var(--rice-text-color);
			}

			&__dot {
				height: 10px;
				width: 10px;
				border-radius: 100px;
				background-color: var(--rice-text-color);
			}

			&__line {
				position: absolute;
				background-color: var(--rice-primary-color);
				width: 1px;
				height: 15px;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				/* #ifndef APP */
				animation: 1s line-animation infinite;
				/* #endif */
			}

			&--radius {
				border-radius: 4px;
			}

			&--line {
				background-color: transparent;
				border-style: none;
				border-bottom: 2px solid var(--rice-code-input-background);
				border-radius: 0px;
			}


		}



		&__input {
			position: absolute;
			z-index: 2;
			left: -750rpx;
			right: 0;
			top: 0;
			height: 42px;
			background-color: transparent;
			text-align: left;
		}
	}


	/* #ifndef APP */
	@keyframes line-animation {
		0% {
			opacity: 0;
		}

		50% {
			opacity: 1;
		}

		100% {
			opacity: 0;
		}
	}

	/* #endif */
</style>