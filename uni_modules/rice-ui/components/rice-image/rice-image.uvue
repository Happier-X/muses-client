<template>
	<view :class="imageClass" :style="[imageStyle,customStyle]" @click="handleClick">
		<view v-if="error" :class="ns.e('error')">
			<slot name="error">
				<rice-icon v-if="showError" :name="errorIcon" :size="iconSize" :color="_iconColor" />
			</slot>
		</view>
		<image v-else :class="imgClass" :src="src" :mode="mode" :lazyLoad="lazyLoad" :fadeShow="fadeShow" :webp="webp"
			:showMenuByLongpress="showMenuByLongpress" :draggable="draggable" :style="imgStyle" @load="handleLoad"
			@error="handleError">
		</image>
		<view v-if="loading" :class="ns.e('loading')">
			<slot name="loading">
				<rice-icon v-if="showLoading" :name="loadingIcon" :size="iconSize" :color="_iconColor" />
			</slot>
		</view>

	</view>
</template>

<script setup>
	/**
	 * @description Image 图片
	 * @property {String} src 图片地址
	 * @property {String} mode 图片裁剪、缩放的模式，等同于官方`image`组件的`mode`，默认 `scaleToFill`
	 * @property {String|Number} width 宽度 
	 * @property {String|Number} height 高度 
	 * @property {Boolean} round 是否圆形
	 * @property {String|Number} radius 圆角
	 * @property {Boolean} showError 是否展示图片加载失败的提示，默认 true
	 * @property {Boolean} showLoading 是否展示图片加载中的提示，默认 true
	 * @property {String} errorIcon 失败时提示的图标名称图片链接
	 * @property {String|Number} iconSize 加载图片和失败图片的大小，默认32px
	 * @property {String} iconColor 加载图片和失败图片的颜色
	 * @property {String} bgColor 背景颜色
	 * @property {Boolean} preview 是否开启图片预览功能，默认false
	 * @property {Array} previewSrcList 要进行预览图片的合集
	 * @property {Number} previewIndex 初始预览图像索引，要小于previewSrcList的长度
	 * @property {Boolean} lazyLoad 图片懒加载。只针对page与scroll-view下的image有效。 安卓默认懒加载不支持修改，等同于官方`image`组件的`lazyLoad`
	 * @property {Boolean} fadeShow 图片显示动画效果，等同于官方`image`组件的`fadeShow`
	 * @property {Boolean} webp 是否支持 webP 格式，等同于官方`image`组件的`webp`
	 * @property {Boolean} showMenuByLongpress 开启长按图片显示识别小程序码菜单，等同于官方`image`组件的`showMenuByLongpress`
	 * @property {Boolean} draggable 鼠标长按是否能拖动图片(仅H5平台)，等同于官方`image`组件的`draggable`
	 * @property {Object} customStyle 自定义样式
	 */
	import { addUnit, clamp, hasStrValue } from "../../libs/utils"
	import { useNamespace } from '../../libs/use';
	import { isDark } from "../../libs/store";
	import { ImageProps } from "./type.uts"
	defineOptions({
		name: 'rice-image'
	})
	const ns = useNamespace('image')
	const emit = defineEmits<{
		click : [],
		load : [event: UniImageLoadEvent],
		error : [event: UniImageErrorEvent]
	}>()

	const props = withDefaults(defineProps<ImageProps>(), {
		src: "",
		mode: 'scaleToFill',
		showError: true,
		showLoading: true,
		errorIcon: 'photo-fail',
		loadingIcon: "photo",
		iconSize: "30px",
		preview: false,
		lazyLoad: false,
		fadeShow: false,
		webp: true,
		showMenuByLongpress: false,
		draggable: false,
		customStyle: () : UTSJSONObject => ({})
	})

	const _iconColor = computed<string>(() => props.iconColor ?? (isDark.value ? '#8d9095' : '#dcdee0'))

	const error = ref(false)
	const loading = ref(true)


	watch(() : string | null => props.src, () => {
		error.value = false;
		loading.value = true
	})

	const handleLoad = (event : UniImageLoadEvent) => {
		error.value = false
		if (loading.value) {
			loading.value = false
			emit('load', event)
		}
	}

	const handleError = (event : UniImageErrorEvent) => {
		error.value = true
		loading.value = false
		emit('error', event)
	}

	const handleClick = () => {
		if (loading.value || error.value) return
		const hasPreviewList = Array.isArray(props.previewSrcList) && props.previewSrcList.length > 0
		if (props.preview || hasPreviewList) {
			const urls = hasPreviewList ? props.previewSrcList! : [props.src]
			let current = props.previewIndex ?? urls.findIndex(v => v == props.src)
			current = clamp(current, 0, urls.length - 1)
			console.log('current', current)
			uni.previewImage({
				urls,
				current
			})
			return
		}
		emit('click')
	}


	const imageStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.height != null) css.set('height', addUnit(props.height!))
		if (props.width != null) css.set('width', addUnit(props.width!))
		if (props.radius != null) css.set('border-radius', addUnit(props.radius!))
		if (props.bgColor != null) css.set('background-color', props.bgColor)
		return css
	})

	const imgStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.radius != null) css.set('border-radius', addUnit(props.radius!))
		return css
	})

	const imageClass = computed(() => {
		return [
			ns.b(""),
			ns.theme(),
			ns.is("round", props.round == true),
		]
	})

	const imgClass = computed(() => {
		return [
			ns.e("img"),
			ns.is("round", props.round == true),
		]
	})
</script>

<style scoped lang="scss">
	.rice-image {
		position: relative;

		&__img {
			height: 100%;
			width: 100%
		}

		&--round {
			border-radius: 999px;
		}

		&__loading,
		&__error {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			align-items: center;
			justify-content: center;
			background: var(--rice-image-placeholder-background);
		}

	}
</style>