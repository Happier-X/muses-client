<template>
	<view :class="stepperClass" :style="customStyle" ref="stepperRef">
		<view v-if="showMinus" :class="minusClass" :style="[btnStyle,splitCssProperty(minusBtnStyle).rectCssProperty]"
			@click.stop="decrease">
			<rice-icon name="minus" :size="fontSize" :color="getIconColor('minus')" />
		</view>
		<input v-if="showInput" :type="inputType" :inputmode="integer?'numeric':'decimal'" :class="inputClass"
			:value="displayValue" :style="[inputBoxStyle,inputStyle]" :disabled="_disabledInput" @input="onInput"
			@focus="onFocus" @blur="onBlur" />
		<view v-if="showPlus" :class="plusClass" :style="[btnStyle,splitCssProperty(plusBtnStyle).rectCssProperty]"
			@click.stop="increase">
			<rice-icon name="plus" :size="fontSize" :color="getIconColor('plus')" />
		</view>
	</view>
</template>

<script setup>
	/**
	 * @description Stepper
	 * @property {Number} modelValue，绑定值
	 * @property {Number} step 步长，默认1
	 * @property {Number} min 最小值
	 * @property {Number} max 最大值
	 * @property {Boolean} autoFixed 是否自动校正超出限制范围的数值  
	 * @property {Boolean} integer 是否只允许输入整数，默认false
	 * @property {Number} decimalLength 固定显示的小数位数
	 * @property {Boolean} disabled 是否禁用，默认false
	 * @property {Boolean} readonly 是否只读，默认false
	 * @property {Boolean} disableMinus 是否禁用减少按钮，默认false
	 * @property {Boolean} disablePlus 是否禁用增加按钮，默认false
	 * @property {Boolean} disableInput 是否禁用输入框，默认false
	 * @property {Boolean} showMinus 是否显示减少按钮，默认true
	 * @property {Boolean} showPlus 是否显示增加按钮，默认true
	 * @property {Boolean} showInput 是否显示输入框，默认true
	 * @property {Function} beforeChange 改变前的钩子，返回 `false` 或者返回 `Promise` 且被 `reject` 或 `resolve` 但返回值不为 `true`，则停止切换
	 * @property {String|Number} inputWidth 输入框宽度，默认36px
	 * @property {String|Number} buttonSize 按钮大小和输入框高度，默认30px
	 * @property {String|Number} fontSize 按钮icon大小和输入框文字大小，默认14px 
	 * @property {String} mode 样式风格，可选值为 `round` 默认 square
	 * @value round 圆形
	 * @value square 方形（默认值）
	 * @value outline 外边线
	 * @property {Object} plusBtnStyle 增加按钮的样式
	 * @property {Object} minusBtnStyle 减少按钮的样式
	 * @property {Object} inputStyle input的样式
	 * @property {Object} customStyle 自定义style
	 */
	import { isDark } from '../../libs/store';
	import { addUnit, clamp, callInterceptor, debugWarn, hasStrValue, toNum, getPrecision, isSameValue, splitCssProperty, } from "../../libs/utils"
	import { useCssVar, useNamespace } from '../../libs/use';
	import { formDisabledInjectKey, formReadonlyInjectKey } from "../rice-form"
	import { BeforeChangeInterceptor } from "../../libs/types"
	import { StepperProps, StepperCurrent } from './type.uts';

	defineOptions({
		name: 'rice-stepper'
	})

	const ns = useNamespace('stepper')
	const emit = defineEmits<{
		change : [newVal: number, oldVal?: number],
		blur : [e: UniInputBlurEvent],
		focus : [e: UniInputFocusEvent],
		input : [newVal: string]
	}>()
	const props = withDefaults(defineProps<StepperProps>(), {
		step: 1,
		integer: false,
		disabled: false,
		readonly: false,
		disableInput: false,
		disableMinus: false,
		disablePlus: false,
		showMinus: true,
		showPlus: true,
		showInput: true,
		autoFixed: true,
		fontSize: '14px',
		min: -Infinity,
		max: Infinity,
		decimalLength: 0,
		mode: 'square',
		plusBtnStyle: () : UTSJSONObject => ({}),
		minusBtnStyle: () : UTSJSONObject => ({}),
		inputStyle: () : UTSJSONObject => ({}),
		customStyle: () : UTSJSONObject => ({}),
	})
	//@ts-ignore
	const modelValue = defineModel({
		type: Number as PropType<number | null>
	})

	const formDisabled = inject<Ref<boolean | null> | null>(formDisabledInjectKey, null)
	const formReadonly = inject<Ref<boolean | null> | null>(formReadonlyInjectKey, null)
	const _readonly = computed<boolean>(() => (formReadonly?.value ?? false) || props.readonly)

	const overMax = computed(() => modelValue.value != null ? modelValue.value! >= props.max : false)
	const overMin = computed(() => modelValue.value != null ? modelValue.value! <= props.min : false)
	const _disabledInput = computed<boolean>(() => props.disableInput || _readonly.value || props.disabled || (formDisabled?.value ?? false))
	const _disabledPlus = computed<boolean>(() => props.disablePlus || props.disabled || overMax.value || (formDisabled?.value ?? false))
	const _disabledMinus = computed<boolean>(() => props.disableMinus || props.disabled || overMin.value || (formDisabled?.value ?? false))
	const _beforeChange = computed(() => props.beforeChange != null && typeof props.beforeChange == 'function')

	const inputType = computed(() => {
		//鸿蒙number输入框输不了负数
		// #ifdef APP-HARMONY || WEB
		return 'text'
		// #endif

		// #ifndef APP-HARMONY || WEB
		return props.integer ? 'number' : 'digit'
		// #endif
	})


	const current = reactive<StepperCurrent>({
		inputValue: null,
		currentValue: modelValue.value
	})

	//显示在input框上的值
	const displayValue = computed(() => {
		if (current.inputValue != null) {
			return current.inputValue!
		}
		let currentVal = current.currentValue
		if (currentVal == null) return ""
		if (typeof currentVal == 'number') {

			if (isNaN(currentVal)) return ""
			//保留小数点后几位
			if (props.decimalLength > 0) {
				currentVal = currentVal.toFixed(props.decimalLength)
			} else {
				currentVal = currentVal.toString()
			}
		}
		return currentVal
	})

	const numPrecision = computed<number>(() => {
		const stepDecimal = getPrecision(props.step)
		if (props.decimalLength > 0) {
			if (stepDecimal > props.decimalLength) {
				debugWarn('Stepper', 'The decimalLength cannot be less than the number of decimal places of step!')
			}
			return props.decimalLength
		}
		return Math.max(getPrecision(modelValue.value), stepDecimal)
	})

	//将一个数字转换为指定精度的小数
	function format(value : number, decimal ?: number) {
		if (decimal == null) decimal = numPrecision.value
		//将数字四舍五入为整数
		if (decimal == 0) return Math.round(value)
		let snum = value.toString()
		const pointPos = snum.indexOf('.')
		//没有小数
		if (pointPos == -1) return value
		const nums = snum.replace('.', '').split('')
		const index = pointPos + decimal!
		//索引超出数组范围,不需要进行精度处理
		if (index >= nums.length) {
			return value
		}
		const length = snum.length
		//如果最后一位是5，将字符串的最后一个字符替换为 6，以减少四舍五入方法可能产生的误差。
		if (snum.charAt(length - 1) == '5') {
			snum = `${snum.slice(0, Math.max(0, length - 1))}6`
		}
		return parseFloat(parseFloat(snum).toFixed(decimal))
	}

	const updateModelValue = (newVal : number) => {
		modelValue.value = newVal
	}

	const getMin = () => (props.min == -Infinity ? 0 : props.min) as number

	function verifyValue(value ?: string | number, update = false) {
		const { max, min, decimalLength, integer, autoFixed } = props

		if (max < min) {
			debugWarn('Steeper', 'min should not be greater than max.')
		}

		const val = hasStrValue(value) ? value : (autoFixed ? getMin() : null);
		if (val == null || isNaN(toNum(val!))) return null
		let newVal = toNum(val!)

		if (decimalLength != 0) {
			newVal = format(newVal, decimalLength)
		}
		if (integer) {
			newVal = Math.round(newVal)
		}
		if (autoFixed) {
			newVal = clamp(newVal, min, max)
		}
		if (!isSameValue(newVal, value) && update) {
			updateModelValue(newVal)
		}

		return newVal
	}

	const handleChange = (newVal : number) => {
		const oldVal = current.currentValue
		updateModelValue(newVal)
		if (!isSameValue(newVal, oldVal)) {
			emit('change', newVal, oldVal == null ? oldVal : toNum(oldVal!))
		}
		current.currentValue = newVal
	}

	function setCurrentValue(value ?: string | number, source = 'btn') {
		const oldVal = current.currentValue
		const newVal = verifyValue(value)
		if (newVal == null) return
		//input 输入时，改变modelValue的值，但是不发射change事件，失去焦点时在发射事件
		if (source == 'input') {
			if (!_beforeChange.value) {
				updateModelValue(newVal!)
			}
			return
		}

		if (isSameValue(newVal, oldVal)) return

		if (!_beforeChange.value) {
			current.inputValue = null
			handleChange(newVal!)
			return
		}
		//异步控制
		callInterceptor(props.beforeChange as BeforeChangeInterceptor, {
			done() {
				handleChange(newVal!)
			},
			complete() {
				current.inputValue = null
			}
		})

	}

	const setCurrentByModelValue = () => {
		if (!isSameValue(modelValue.value, current.currentValue)) {
			current.currentValue = modelValue.value
		}
	}

	const increase = (e : UniPointerEvent) => {
		e.stopPropagation()
		if (_disabledPlus.value || _readonly.value) return
		const n = parseFloat(displayValue.value)
		const value = isNaN(n) ? getMin() : n
		const newVal = format(value + props.step, null)
		setCurrentValue(newVal)
		setCurrentByModelValue()
	}

	const decrease = (e : UniPointerEvent) => {
		e.stopPropagation()
		if (_disabledMinus.value || _readonly.value) return
		const n = parseFloat(displayValue.value)
		const value = isNaN(n) ? getMin() : n
		const newVal = format(value + props.step * -1, null)
		setCurrentValue(newVal)
		setCurrentByModelValue()
	}

	const onInput = (e : UniInputEvent) => {
		const value = e.detail.value
		current.inputValue = value
		setCurrentValue(value, 'input')
		emit('input', value)
	}

	const onFocus = (e : UniInputFocusEvent) => {
		nextTick(() => emit('focus', e))
	}

	const isEmptyStr = (val : any) => {
		// #ifndef APP-ANDROID
		return val === ""
		// #endif
		// #ifdef APP-ANDROID
		return val == ""
		// #endif
	}

	const onBlur = (e : UniInputBlurEvent) => {
		if (!_beforeChange.value) {
			current.inputValue = null
		}
		const value = e.detail.value
		const newVal = hasStrValue(value) ? parseFloat(value) : ""
		if ((typeof newVal == 'number' && !isNaN(newVal)) || isEmptyStr(newVal)) {
			setCurrentValue(newVal, 'blur')
		}

		setCurrentByModelValue()
		nextTick(() => emit('blur', e))
	}

	watch(modelValue, (newVal ?: number, oldVal ?: number) => {
		const value = verifyValue(newVal, true)
		if (current.inputValue == null && !isSameValue(value, oldVal)) {
			current.currentValue = value
		}
	}, {
		immediate: true
	})

	watch([() : boolean => props.integer, () : number => props.decimalLength,
	() : number => props.min, () : number => props.max], () => {
		setCurrentValue(modelValue.value, 'watch')
	})

	//#ifdef APP
	const stepperRef = shallowRef<UniElement | null>(null)
	const primaryColor = useCssVar('--rice-primary-color', stepperRef)
	const textColor = useCssVar('--rice-text-color', stepperRef)
	const textColorWhite = useCssVar('--rice-text-color-white', stepperRef)

	//#endif

	const getIconColor = (type : string) => {
		const textStyle = splitCssProperty(type == 'plus' ? props.plusBtnStyle : props.minusBtnStyle).textCssProperty
		if (typeof textStyle['color'] == 'string') {
			return textStyle['color'] as string
		}

		// #ifndef APP
		return 'inherit'
		// #endif

		// #ifdef APP
		if (props.mode == 'round') {
			return type == 'minus' ? primaryColor.value : textColorWhite.value
		}
		return textColor.value
		// #endif

	}

	const btnStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.buttonSize != null) {
			const size = addUnit(props.buttonSize!)
			css.set('height', size)
			css.set('width', size)
		}
		return css
	})

	const inputBoxStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.buttonSize != null) {
			css.set('height', addUnit(props.buttonSize!))
		}
		if (props.inputWidth != null) {
			css.set('width', addUnit(props.inputWidth!))
		}
		css.set('font-size', addUnit(props.fontSize))
		return css
	})

	const stepperClass = computed(() => {
		return [
			ns.b(""),
			ns.theme(),
			ns.is("disabled", props.disabled),
			ns.m(props.mode),
		]
	})

	const minusClass = computed(() => {
		return [
			ns.e("minus"),
			ns.is("__minus--disabled", _disabledMinus.value && !props.disabled),
			ns.e(`minus--${props.mode}`),
		]
	})

	const plusClass = computed(() => {
		return [
			ns.e("plus"),
			ns.is("__plus--disabled", _disabledPlus.value && !props.disabled),
			ns.e(`plus--${props.mode}`),
		]
	})

	const inputClass = computed(() => {
		return [
			ns.e("input"),
			ns.e(`input--${props.mode}`)
		]
	})
</script>

<style scoped lang="scss">
	$size: 30px;
	$radius: 4px;

	@mixin disabled() {
		opacity: .6;
		/* #ifdef WEB */
		cursor: not-allowed;
		/* #endif */
	}

	@mixin btnRound() {
		border-radius: 999px;
		border: 1px solid var(--rice-primary-color);
	}

	.rice-stepper {
		flex-direction: row;
		/* #ifndef APP */
		color: var(--rice-text-color);

		/* #endif */
		&__input {
			box-sizing: border-box;
			text-align: center;
			margin: 0 2px;
			height: $size;
			width: 36px;
			color: var(--rice-text-color);
			background-color: var(--rice-stepper-background);

			&--round {
				background-color: transparent;
			}

			&--outline {
				margin: 0px;
				border-top: 1px solid var(--rice-stepper-background);
				border-bottom: 1px solid var(--rice-stepper-background);
				/* #ifdef APP-IOS */
				border-left: 0px solid transparent;
				border-right: 0px solid transparent;
				/* #endif */
				background-color: transparent;
			}
		}

		&__minus,
		&__plus {
			box-sizing: border-box;
			align-items: center;
			justify-content: center;
			height: $size;
			width: $size;
			background-color: var(--rice-stepper-background);


			&--disabled {
				@include disabled;
			}

			&--outline {
				border: 1px solid var(--rice-stepper-background);
				background-color: transparent;
			}
		}

		&__minus {
			border-radius: $radius 0 0 $radius;

			&--round {
				@include btnRound;
				background-color: transparent;
				/* #ifndef APP */
				color: var(--rice-primary-color);
				/* #endif */
			}
		}

		&__plus {
			border-radius: 0 $radius $radius 0;

			&--round {
				@include btnRound;
				/* #ifndef APP */
				color: var(--rice-text-color-white);
				/* #endif */
				background-color: var(--rice-primary-color);
			}
		}

		&--outline {
			border-radius: $radius;
			// border: 1px solid var(--rice-stepper-background);
		}

		&--disabled {
			@include disabled;
		}
	}
</style>