<template>
	<view :class="tabsClass" :style="[tabsStyle,customStyle]" ref="tabsRef">
		<slot name="left"></slot>
		<scroll-view ref="tabScrollRef" class="rice-tabs__scroll" direction="horizontal" :show-scrollbar="false"
			:scroll-left="scrollLeft" scroll-with-animation="true">
			<!-- #ifdef MP-WEIXIN -->
			<view class="rice-tabs__scrollmp">
			<!-- #endif -->
				<view v-for="(item,index) in list" :key="item.name" :class="tabsItemClass" :data-name="item.name"
					@click="tabsItemClick(item,index)">
					<rice-badge v-if="item.badge!=null" :is-dot="item.badge!.isDot" :value="item.badge!.value"
						:show-zero="item.badge!.showZero??true" :offset="[10,0]">
						<text :style="getTextStyle(item,index)" class="rice-tabs__item__text"
							:class="{'rice-tabs__item__active':index==modelValue,'rice-tabs__item__disabled':item.disabled}">{{item.name}}</text>
					</rice-badge>
					<text v-else :style="getTextStyle(item,index)" class="rice-tabs__item__text"
						:class="{'rice-tabs__item__active':index==modelValue,'rice-tabs__item__disabled':item.disabled}">{{item.name}}</text>
				</view>
				<!-- 鸿蒙平台有bug，暂不支持下划线 https://issues.dcloud.net.cn/pages/issues/detail?id=20699 -->
				<!-- #ifndef APP-HARMONY -->
				<view ref="indicatorRef" :style="indicatorStyle" class="rice-tabs__indicator"></view>
				<!-- #endif -->
			<!-- #ifdef MP-WEIXIN -->
			</view>
			<!-- #endif -->
		</scroll-view>
		<slot name="right"></slot>
	</view>
</template>

<script setup>
	/**
	 * @description Tabs
	 * @property {Array} list 标签数组
	 * @property {String} bgColor 背景颜色
	 * @property {String|Number} height 高度
	 * @property {Boolean} shrink 是否开启收缩布局，开启后内容会向左收缩，默认false
	 * @property {String} titleActiveColor 选中时的文字颜色
	 * @property {String} titleInactiveColor 未中时的文字颜色
	 * @property {String} lineColor 滑块颜色
	 * @property {String|Number} lineWidth 滑块宽度，默认20px,设置为 0 就不显示滑块，设置为 '100%' 就是和内容区的宽度一致
	 * @property {String|Number} lineHeight 滑块高度，默认3px
	 * @property {Object} itemStyle 菜单item的样式
	 * @property {Object} activeStyle 菜单选中时的样式
	 * @property {Object} inactiveStyle 菜单未选中时的样式  
	 * @property {Object} customStyle 自定义样式
	 */
	import { addUnit, clamp, getPxNum, getRandomStr, hasStrValue, splitCssProperty } from "../../libs/utils"
	import { useCssVar, useNamespace } from "../../libs/use"
	import { TabsProps, TabsOptions, TabsClickTab, TabsChange } from './type.uts';

	defineOptions({
		name: 'rice-tabs'
	})

	const emit = defineEmits<{
		clickTab : [TabsClickTab],
		change : [TabsChange]
	}>()
	const ns = useNamespace('tabs')
	const props = withDefaults(defineProps<TabsProps>(), {
		list: () : TabsOptions[] => ([] as TabsOptions[]),
		shrink: false,
		lineWidth: '20px',
		itemStyle: () : UTSJSONObject => ({}),
		activeStyle: () : UTSJSONObject => ({}),
		inactiveStyle: () : UTSJSONObject => ({}),
		customStyle: () : UTSJSONObject => ({}),
	})

	const modelValue = defineModel({
		type: Number,
		default: 0

	})
	let lastValue = 0
	const instance = getCurrentInstance()
	const scrollLeft = ref(0)
	const id = ref(getRandomStr())
	const tabScrollRef = shallowRef<UniElement | null>(null)
	const indicatorRef = shallowRef<UniElement | null>(null)
	const tabsNodeInfo = shallowRef<NodeInfo[]>([])

	function updateTabIndicator(moveTo ?: number) {
		if (moveTo == null) moveTo = 0
		const tabLen = tabsNodeInfo.value.length
		if (moveTo < 0 || moveTo >= tabLen) return
		const moveToRect = tabsNodeInfo.value[moveTo]!
		const moveToWidth = moveToRect.width ?? 0
		if (tabLen <= 0 || moveTo >= tabLen) return
		const offsetLeft = tabsNodeInfo.value.slice(0, moveTo).reduce((cur, pre) => {
			return cur + pre.width!
		}, 0)
		let lineWidth = getPxNum(props.lineWidth!, moveToWidth)
		//滑块的宽度
		indicatorRef.value?.style.setProperty('width', lineWidth + 'px')
		let x = offsetLeft + (moveToWidth - lineWidth) / 2
		indicatorRef.value?.style.setProperty('transform', `translateX(${x}px)`)
		tabScrollRef.value?.getBoundingClientRectAsync()?.then((res : DOMRect) => {
			scrollLeft.value = x - res.width / 2
		})

	}

	const resize = async () => {
		await nextTick()
		uni.createSelectorQuery().in(instance).selectAll(`.rice-tabs__item--${id.value}`).boundingClientRect(res => {
			const nodeInfoArr = res as NodeInfo[]
			tabsNodeInfo.value = nodeInfoArr
			updateTabIndicator(modelValue.value)
		}).exec()
	}
	
	//@ts-ignore
	const tabsItemClick = (tab : TabsOptions, index : number) => {

		emit('clickTab', {
			index,
			name: tab.name,
			value: tab.value,
			disabled: tab.disabled ?? false
		} as TabsClickTab)
		if (modelValue.value == index || tab.disabled == true) return
		modelValue.value = index
		lastValue = index
		emit('change', {
			index,
			name: tab.name,
			value: tab.value,
			disabled: tab.disabled ?? false
		} as TabsChange)
		updateTabIndicator(index)
	}

	watch(modelValue, (newVal : number) => {
		if (lastValue != newVal) {
			lastValue = newVal
			updateTabIndicator(newVal)
		}
	})

	watch(() : (any | null)[] => [props.lineWidth, props.lineHeight, props.list], async () => {
		id.value = getRandomStr()
		await nextTick()
		// #ifdef APP-HARMONY
		timer = setTimeout(() => {
			resize()
		}, 200)
		// #endif
		// #ifndef APP-HARMONY
		resize()
		// #endif
	}, {
		deep: true,
	})

	const tabsStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.height != null) css.set('height', addUnit(props.height!))
		if (hasStrValue(props.bgColor)) css.set('background-color', props.bgColor!)
		return css
	})

	// #ifdef APP-HARMONY
	const tabsRef = ref<UniElement | null>(null)
	const disabledTextColor = useCssVar('--rice-tabs-disabled-text-color', tabsRef)
	// #endif

	const getTextStyle = (tab : TabsOptions, index : number) => {
		const textCss = splitCssProperty(props.itemStyle).textCssProperty
		if (modelValue.value == index) {
			const activeTextStyle = splitCssProperty(props.activeStyle).textCssProperty
			if (hasStrValue(props.titleActiveColor)) {
				activeTextStyle['color'] = props.titleActiveColor!
			}
			return UTSJSONObject.assign(textCss, activeTextStyle)
		}
		const inactiveTextStyle = splitCssProperty(props.inactiveStyle).textCssProperty
		if (tab.disabled == true && hasStrValue(inactiveTextStyle['color'])) {
			// #ifdef APP-HARMONY
			inactiveTextStyle['color'] = disabledTextColor.value
			// #endif
			// #ifndef APP-HARMONY
			inactiveTextStyle['color'] = null
			// #endif
		}
		if (hasStrValue(props.titleInactiveColor) && tab.disabled != true) {
			inactiveTextStyle['color'] = props.titleInactiveColor!
		}
		return UTSJSONObject.assign(textCss, inactiveTextStyle)
	}

	const indicatorStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.lineHeight != null) css.set('height', addUnit(props.lineHeight!))
		if (hasStrValue(props.lineColor)) css.set('background-color', props.lineColor!)
		return css
	})

	const tabsClass = computed(() => {
		return [
			ns.b(""),
			ns.theme()
		]
	})

	const tabsItemClass = computed(() => {
		return [
			ns.e("item"),
			ns.is("shrink", props.shrink),
			// #ifndef APP-HARMONY
			ns.e(`item--${id.value}`),
			// #endif
		]
	})

	// #ifdef APP-HARMONY
	let timer : number | null = null
	// #endif

	onMounted(() => {
		// #ifdef APP-HARMONY
		timer = setTimeout(() => {
			resize()
		}, 200)
		// #endif

		// #ifndef APP-HARMONY
		resize()
		// #endif

	})

	// #ifdef APP-HARMONY
	onUnmounted(() => {
		if (timer != null) clearTimeout(timer!)
	})
	// #endif

	defineExpose({
		resize
	})
</script>

<style scoped lang="scss">
	.rice-tabs {
		flex-direction: row;
		height: 44px;
		background-color: var(--rice-tabs-background);

		&__scroll {
			/* #ifndef MP-WEIXIN */
			position: relative;
			/* #endif */
			flex-direction: row;
			height: 100%;
			flex: 1;
		}


		/* #ifdef MP-WEIXIN */
		&__scrollmp {
			position: relative;
			flex: 1;
			height: 100%;
			flex-direction: row;
			align-items: center;
			overflow: visible;
		}

		/* #endif */


		&__item {
			position: relative;
			flex-direction: row;
			align-items: center;
			justify-content: center;
			padding: 0 12px;
			flex: 1 0 auto;
			overflow: visible;
			/* #ifdef WEB */
			cursor: pointer;

			/* #endif */
			&__text {
				transition: color .3s;
				font-size: var(--rice-font-size-basic);
				color: var(--rice-text-color-2);
			}

			&__active {
				color: var(--rice-text-color);
			}

			&__disabled {
				color: var(--rice-tabs-disabled-text-color);
				/* #ifdef WEB */
				cursor: not-allowed;
				/* #endif */
			}

		}

		&--shrink {
			padding: 0 8px;
			flex: none;
		}

		&__indicator {
			position: absolute;
			z-index: 1;
			bottom: 2px;
			left: 0px;
			border-radius: 100px;
			transition-property: transform, width;
			transition-duration: 300ms;
			width: 20px;
			height: 3px;
			background-color: var(--rice-primary-color);
		}

	}
</style>