<template>
	<text v-if="hasStrValue(title)" class="rice-cell-group__title" :class="cellGroupTitleClass"
		:style="titleStyle">{{title}}</text>
	<view :class="cellGroupClass" :style="[cellGroupStyle,customStyle]">
		<slot />
	</view>
</template>

<script setup>
	/**
	 * @description rice-cell-group 单元格为列表中的单个展示项。
	 * @property {String|Number} title 分组标题
	 * @property {Boolean} border 是否显示上下边框，默认false
	 * @property {String|Number} radius 圆角值
	 * @property {Object} titleStyle 标题文字样式 
	 * @property {Object} customStyle 自定义样式
	 */
	import { hasStrValue, addUnit } from "../../libs/utils"
	import { useNamespace } from "../../libs/use"
	import { CellGroupProps } from "./type.uts"

	defineOptions({
		name: 'rice-cell-group'
	})

	const ns = useNamespace("cell-group")

	const props = withDefaults(defineProps<CellGroupProps>(), {
		border: false,
		titleStyle: () : UTSJSONObject => ({}),
		customStyle: () : UTSJSONObject => ({}),
	})

	const cellGroupStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.radius != null) {
			css.set('border-radius', addUnit(props.radius!))
		}
		return css
	})

	const cellGroupClass = computed(() => {
		return [
			ns.b(""),
			ns.theme(),
			ns.is('border', props.border)
		]
	})

	const cellGroupTitleClass = computed(() => {
		return [
			ns.theme(),
		]
	})
</script>

<style scoped lang="scss">
	@import "../../libs/style/mixins/hairline";

	.rice-cell-group {
		background-color: var(--rice-cell-background);

		&__title {
			padding: var(--rice-padding-md);
			color: var(--rice-text-color-2);
			font-size: var(--rice-font-size-basic);

		}

		&--border {
			@include hairline-top-bottom;
		}
	}
</style>