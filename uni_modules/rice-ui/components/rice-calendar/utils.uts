import { dateuts, DateObject } from "../../libs/plugin";
import { padZero } from "../../libs/utils";
import { CalendarData, CalendarFormatter, CalendarMode } from "./type.uts"
import { Lunar } from "./lunar.uts"

const lunar = new Lunar()

export const formatDate = (date : string) => {
	const str = date.split('-');
	const year = str.length >= 1 ? str[0] : ''
	const month = str.length >= 2 ? str[1] : ''
	const day = str.length >= 3 ? str[2] : ''
	const formattedMonth = padZero(month);
	const formattedDay = padZero(day);
	return `${year}-${formattedMonth}-${formattedDay}`;
}

export const getDateRange = (date : string, min ?: string, max ?: string) => {
	//日期小于最小可选日期
	if (min != null && dateuts(date).isBefore(min, 'date')) {
		return min!
	}
	//日期大于最大可选日期
	if (max != null && dateuts(date).isAfter(max, 'date')) {
		return max!
	}
	return date
}

export const getIsSelected = (day : CalendarData, dates : string[], mode : CalendarMode) => {
	if (dates.length <= 0) return false
	const start = formatDate(dates[0])
	if (mode == 'range') {
		const end = dates.length >= 2
			? formatDate(dates[1])
			: null
		if (end != null && end == day.fullDate) {
			return true
		}
	} else if (mode == 'multiple') {
		const selectedIndex = dates.findIndex(v => formatDate(v) == day.fullDate)
		return selectedIndex != -1
	}
	return start == day.fullDate
}

export const getIsBetween = (day : CalendarData, dates : string[]) => {
	if (dates.length < 2) return false
	const start = dates[0]
	const end = dates[1]
	return dateuts(day.fullDate).isBetween(start, end, 'day')

}

const getCurrentMonthDays = (daysInMonth : number, dateInfo : DateObject, formatter ?: CalendarFormatter, min ?: string, max ?: string) => {
	const dateList : CalendarData[] = []
	const year = dateInfo.year
	const month = dateInfo.month + 1
	for (let i = 1; i <= daysInMonth; i++) {
		const lunarInfo = lunar.solar2lunar(year, month, i);
		const day = new Date(year, month - 1, i).getDay()
		const fullDate = `${year}-${padZero(month)}-${padZero(i)}`
		const disabled = !(dateuts(fullDate).isBetween(min ?? '1900-01-01', max ?? '2099-12-31', 'date', '[]'))
		let config = {
			fullDate,
			year,
			month,
			date: i,
			day: day == 0 ? 7 : day,
			lunarInfo,
			disabled,
			isToday: lunarInfo.isToday,
		} as CalendarData
		if (typeof formatter == 'function') {
			config = formatter!(config)
		}
		dateList.push(config)
	}
	return dateList
}

export const getFirstWeekDays = (firstDayOfMonth : number, firstDayOfWeek : number) => {
	return 7 - (firstDayOfMonth + 7 - firstDayOfWeek) % 7
}


export const getMonthDays = (dates : string[], firstDayOfWeek : number, formatter ?: CalendarFormatter, min ?: string, max ?: string) => {
	let date = dates.length > 0 ? dates[0] : ''
	const duts = dateuts(date)
	const dateInfo = duts.toObject()
	const daysInMonth = duts.daysInMonth()
	const currentMonthDays = getCurrentMonthDays(daysInMonth, dateInfo, formatter, min, max)
	let monthDays = [] as Array<Array<CalendarData>>
	const firstDayOfMonth = currentMonthDays[0].day //获取1号是周几
	const firstWeekDays = getFirstWeekDays(firstDayOfMonth, firstDayOfWeek)
	monthDays.push(currentMonthDays.slice(0, firstWeekDays))//第一周的天数
	for (let i = firstWeekDays; i < currentMonthDays.length; i += 7) {
		const item : CalendarData[] = currentMonthDays.slice(i, i + 7)
		monthDays.push(item)
	}
	return monthDays

}