<template>
	<view :class="inputClass" :style="[rootStyle,customStyle]">
		<view v-if="$slots['prefix']!=null || prefixIcon!=null" class="rice-input__prefix">
			<slot name="prefix">
				<rice-icon :name="prefixIcon" :size="iconSize" :color="iconColor" @click="clickLeftIcon" />
			</slot>
		</view>
		<input v-model="modelValue" :type="inputType" :inputmode="inputmode" :placeholder="placeholder"
			:password="isPassword" :disabled="isDisabled||isReadonly" :maxlength="maxlength"
			:placeholder-style="_placeholderStyle" :cursor-spacing="cursorSpacing" :cursor-color="cursorColor"
			:auto-focus="autoFocus" :focus="focus" :confirm-type="confirmType" :confirm-hold="confirmHold" :cursor="cursor"
			:selection-start="selectionStart" :selection-end="selectionEnd" :adjust-position="adjustPosition"
			:hold-keyboard="holdKeyboard" :class="inputInnerClass" :style="[customInputStyle,iputStyle]" @input="onInput"
			@focus="onFocus" @blur="onBlur" @keyboardheightchange="onKeyboardheightchange" @change="onChange"
			@confirm="onConfirm" @nicknamereview="onNicknamereview" />
		<rice-icon v-if="isShowPassword" :name="showPasswordValue?'eyes':'eyes-close'" size="17px" :custom-style="iconStyle"
			@click="changeShowPassword" />
		<rice-icon v-if="isShowClearable" :name="clearIcon" size="17px" :custom-style="iconStyle" @click="onClear" />
		<view v-if="$slots['suffix']!=null||suffixIcon!=null" class="rice-input__suffix">
			<slot name="suffix">
				<rice-icon :name="suffixIcon" :size="iconSize" :color="iconColor" @click="clickRightIcon" />
			</slot>
		</view>
		<!-- #ifndef APP -->
		<view v-if="isDisabled||isReadonly" class="rice-input__mask"></view>
		<!-- #endif -->
	</view>
</template>

<script setup>
	/**
	 * @description Input
	 * @property {String} modelValue 输入框的值
	 * @property {String} type 输入框类型
	 * @property {Boolean} disabled 是否禁用
	 * @property {Boolean} readonly 是否只读，默认false
	 * @value none 获取焦点时不显示软键盘，仅支持web，Android，ios
	 * @value password 密码输入框
	 * @value search 为搜索输入优化的虚拟键盘，不支持小程序
	 * @value email 为邮件地址输入优化的虚拟键盘，不支持小程序
	 * @value url 为网址输入优化的虚拟键盘，不支持小程序
	 * @value text 文本输入键盘（默认值）
	 * @value number 数字输入键盘
	 * @value idcard 身份证输入键盘，不支持APP
	 * @value digit 带小数点数字输入键盘
	 * @value tel 电话输入键盘
	 * @value safe-password 密码安全键盘，仅支持微信小程序
	 * @value nickname 昵称输入键盘，仅支持微信小程序
	 * @property {String} placeholder 输入框为空时占位符
	 * @property {String} placeholderStyle 指定 placeholder 的样式
	 * @property {Number} maxlength 最大输入长度，0和正数为合法值，非法值的时候不限制最大长度,默认-1，不限制
	 * @property {Number} cursorSpacing 指定光标与键盘的距离，单位 px 。取 input 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离
	 * @property {String} cursorColor 指定光标颜色，Android的微信小程序非skyline下仅支持黑和绿，iOS版仅支持十六进制颜色值
	 * @property {Boolean} autoFocus 自动获取焦点，与focus属性对比，此属性只会首次生效
	 * @property {Boolean} focus 获取焦点
	 * @property {String} confirmType 设置键盘右下角按钮的文字，仅在 type为text 时生效
	 * @value done 完成（默认值）
	 * @value send 发送
	 * @value search 搜索
	 * @value next 下一个
	 * @value go 前往
	 * @property {Boolean} confirmHold 点击键盘右下角按钮时是否保持键盘不收起
	 * @property {Number} cursor 指定focus时的光标位置
	 * @property {Number} selectionStart 光标起始位置，自动聚集时有效，需与selection-end搭配使用
	 * @property {Number} selectionEnd 光标结束位置，自动聚集时有效，需与selection-satrt搭配使用
	 * @property {Boolean} adjustPosition 键盘弹起时，是否自动上推页面,默认true
	 * @property {String} inputmode 是一个枚举属性，它提供了用户在编辑元素或其内容时可能输入的数据类型的提示，仅支持web，默认会根据type自动适配
	 * @property {Boolean} holdKeyboard focus时，点击页面的时候不收起键盘,默认false
	 * @property {String} color 输入框字体颜色
	 * @property {String|Number} fontSize 输入框字体大小
	 * @property {String} border 输入框的边框
	 * @value surround 全边框（默认值）
	 * @value bottom 下边框
	 * @value none 无边框
	 * @property {String} focusBorder 聚焦时是否显示边框色
	 * @property {String} focusBorderColor 聚焦时的边框色 to do
	 * @property {String} bgColor 背景颜色，默认透明
	 * @property {String} shape 输入框形状
	 * @value square 方形（默认值）
	 * @value round 圆形
	 * @property {String|Number} height 输入框的高度
	 * @property {Boolean} clearable 是否显示清除控件，默认false
	 * @property {String} clearTrigger 清空图标触发方式，仅在输入框有值时有效
	 * @value always 总是显示
	 * @value focus 聚焦时显示
	 * @property {String} clearIcon 清除按钮的name值
	 * @property {Boolean} showPassword 是否显示切换密码图标，默认true
	 * @property {String} showPasswordTrigger 显示密码图标触发方式，仅在输入框有值时有效
	 * @value always 总是显示
	 * @value focus 聚焦时显示
	 * @property {String} prefixIcon 输入框前置图标
	 * @property {String} suffixIcon 输入框后置图标
	 * @property {String|Number} iconSize 前置/后置图标的大小
	 * @property {String|Number} iconColor 前置/后置图标的颜色
	 * @property {String} inputAlign 输入框对齐方式，默认left,可选 right|center
	 * @property {Object} inputStyle 自定义input样式
	 * @property {Object} customStyle 自定义样式
	 */

	import { useNamespace } from "../../libs/use"
	import { isDark } from "../../libs/store"
	import { hasStrValue, addUnit } from "../../libs/utils"
	import { formDisabledInjectKey, formReadonlyInjectKey } from "../rice-form"
	import { formItemBlurInjectKey } from "../rice-form-item"
	import { InputProps } from "./type.uts"
	defineOptions({
		name: 'rice-input'
	})
	const ns = useNamespace("input")
	const slots = useSlots();
	const emit = defineEmits<{
		input : [value: string],
		focus : [event: UniInputFocusEvent],
		blur : [event: UniInputBlurEvent],
		keyboardheightchange : [event: UniInputKeyboardHeightChangeEvent],
		change : [value: string],
		confirm : [value: string],
		nicknamereview : [event: any],
		clickLeftIcon : [],
		clickRightIcon : [],
	}>()

	const props = withDefaults(defineProps<InputProps>(), {
		type: "text",
		maxlength: -1,
		cursorSpacing: 0,
		autoFocus: false,
		focus: false,
		confirmType: 'done',
		confirmHold: false,
		cursor: 0,
		selectionStart: -1,
		selectionEnd: -1,
		adjustPosition: true,
		holdKeyboard: false,
		border: 'surround',
		focusBorder: false,
		shape: 'square',
		clearable: false,
		showPassword: true,
		iconSize: '16px',
		clearTrigger: 'focus',
		clearIcon: 'clear',
		showPasswordTrigger: 'focus',
		iputStyle: () : UTSJSONObject => ({}),
		customStyle: () : UTSJSONObject => ({}),
	})

	const modelValue = defineModel({
		type: String,
		default: ""
	})

	const inputType = computed(() => {
		const type = props.type
		if (type == 'password') return 'text'
		return type
	})

	const formDisabled = inject<Ref<boolean | null> | null>(formDisabledInjectKey, null)
	const formReadonly = inject<Ref<boolean | null> | null>(formReadonlyInjectKey, null)
	const formItemBlur = inject<(() => void) | null>(formItemBlurInjectKey, null)

	const isFocus = ref(false)
	const showPasswordValue = ref(false)

	const isPassword = computed<boolean>(() => props.type == 'password' && !showPasswordValue.value)
	const isDisabled = computed<boolean>(() => (formDisabled?.value ?? false) || (props.disabled ?? false))
	const isReadonly = computed<boolean>(() => (formReadonly?.value ?? false) || (props.readonly ?? false))

	const isShowClearable = computed<boolean>(() => {
		if (isDisabled.value) return false
		const shouldTrigger = props.clearTrigger == 'focus' ? isFocus.value : true
		return props.clearable && modelValue.value != "" && shouldTrigger
	})

	const isShowPassword = computed<boolean>(() => {
		const isPasswordType = props.type == 'password'
		const shouldTrigger = props.showPasswordTrigger == 'focus' ? isFocus.value : true
		return isPasswordType && modelValue.value != "" && shouldTrigger
	})

	const changeShowPassword = () => {
		if (isDisabled.value || isReadonly.value) return
		showPasswordValue.value = !showPasswordValue.value
	}

	const onClear = () => {
		if (isDisabled.value || isReadonly.value) return
		modelValue.value = ""
	}

	const onInput = (e : UniInputEvent) => {
		emit('input', e.detail.value)
	}

	const onFocus = (e : UniInputFocusEvent) => {
		isFocus.value = true
		emit('focus', e)
	}

	let timer : null | number = null
	const onBlur = (e : UniInputBlurEvent) => {
		//加个延迟，防止web等端清除按钮点击不到
		timer = setTimeout(() => {
			isFocus.value = false
			emit('blur', e)
		}, 100)

		formItemBlur?.()
	}

	const onKeyboardheightchange = (e : UniInputKeyboardHeightChangeEvent) => {
		emit('keyboardheightchange', e)
	}

	const onChange = (e : UniInputChangeEvent) => {
		emit('change', e.detail.value)
	}

	const onConfirm = (e : UniInputConfirmEvent) => {
		emit('confirm', e.detail.value)
	}

	const onNicknamereview = (e : any) => {
		emit('nicknamereview', e)
	}

	const clickLeftIcon = () => {
		emit('clickLeftIcon')
	}

	const clickRightIcon = () => {
		emit('clickRightIcon')
	}

	const iconStyle = computed(() => {
		return {
			paddingLeft: '6px',
			opacity: isDisabled.value ? 0.4 : 1
		}
	})

	const rootStyle = computed(() => {
		const css = new Map<string, string>()
		if (hasStrValue(props.bgColor)) {
			css.set('background-color', props.bgColor!)
		}

		if (props.height != null) css.set('height', addUnit(props.height!))
		return css
	})

	const customInputStyle = computed(() => {
		const css = new Map<string, string>()
		if (hasStrValue(props.color)) css.set('color', props.color!)
		if (props.fontSize != null) css.set('font-size', addUnit(props.fontSize!))
		return css
	})

	const inputClass = computed(() => {
		return [
			ns.b(""),
			ns.theme(),
			ns.is("disabled", isDisabled.value),
			ns.m(props.border),
			ns.m(props.shape),
			ns.is("border--focus", isFocus.value && props.border != 'none' && props.focusBorder)
		]
	})

	const inputInnerClass = computed(() => {
		return [
			ns.e("input"),
			ns.is("__input--disabled", isDisabled.value),
			ns.e(`input--${props.inputAlign ?? 'left'}`),
		]
	})

	const _placeholderStyle = computed(() => {
		let baseColor = isDark.value ? '#4d4d4d' : '#c8c9cc'
		let css = `color:${baseColor};font-size:${addUnit(props.fontSize ?? '15px')};`
		return css + (props.placeholderStyle ?? "")
	})

	onUnmounted(() => {
		if (timer != null) clearTimeout(timer!)
	})
</script>

<style scoped lang="scss">
	.rice-input {
		/* #ifndef APP */
		position: relative;
		;
		/* #endif */
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		height: 42px;
		padding: 0 10px;

		&__prefix {
			padding-right: 10px;
		}

		&__suffix {
			padding-left: 10px;
		}

		&__input {
			flex: 1;
			text-align: left;
			font-size: var(--rice-font-size-basic);
			color: var(--rice-text-color);
			height: 100%;

			&--disabled {
				color: var(--rice-input-disabled-text-color)
			}

			&--center {
				text-align: center;
			}

			&--right {
				text-align: right;
			}

		}

		/* #ifndef APP */
		&__mask {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}

		/* #endif */

		&--surround {
			border-radius: 4px;
			border: 1px solid var(--rice-input-border-color);
		}

		&--bottom {
			border-bottom: 1px solid var(--rice-input-border-color);
			padding-left: 0;
			padding-right: 0;
		}

		&--none {
			padding-left: 0;
			padding-right: 0;
		}

		&--border--focus {
			border-color: var(--rice-primary-color);
		}

		&--round {
			border-radius: 100px;
		}

		&--disabled {
			background-color: var(--rice-input-disabled-background);
			/* #ifdef WEB */
			cursor: not-allowed;
			/* #endif */
		}

	}
</style>