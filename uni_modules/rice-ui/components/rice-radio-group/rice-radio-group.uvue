<template>
	<view :class="radioGroupClass" :style="customStyle">
		<slot></slot>
	</view>
</template>

<script setup>
	/**
	 * @description rice-radio-group
	 * @property {Boolean} disabled 是否禁用
	 * @property {Boolean} readonly 是否只读
	 * @property {String} direction 排列方向
	 * @value col 垂直
	 * @value row 水平
	 * @property {String} checkedColor 选中状态下的颜色
	 * @property {String|Number} iconSize icon的大小
	 * @property {String|Number} labelSize label文字的大小
	 * @property {String} labelColor label文字的颜色
	 * @property {String} shape 形状，默认circle-圆形，可选square-方形，dot-圆点形
	 * @property {String} iconPosition 勾选图标的对齐方式，默认 left-左边，可选right-右边
	 * @property {Boolean} spaceBetween 两端对齐
	 * @property {Object} customClass 自定义class
	 * @property {Object} customStyle 自定义style
	 */

	import { useNamespace } from "../../libs/use";
	import { radioGroupInjectKey, defDirection, defShape, defIconPosition } from "./index.uts"
	import { RadioGroupProps, RadioValueType, RadioGroupProvide, RadioIconPosition, RadioShape, RadioDirection } from "./type.uts"
	
	defineOptions({
		name: 'rice-radio-group'
	})

	const ns = useNamespace('radio-group')
	const emit = defineEmits<{
		change : [value: RadioValueType],
	}>()

	const props = withDefaults(defineProps<RadioGroupProps>(), {
		disabled: false,
		readonly: false,
		direction: defDirection,
		spaceBetween: false,
		shape: defShape,
		iconPosition: defIconPosition,
		customStyle: () : UTSJSONObject => ({})
	})

	//@ts-ignore
	const modelValue = defineModel({
		type: [String, Number, Boolean] as PropType<RadioValueType>,
		default: false
	})

	const updateValue = (value : RadioValueType) => {
		modelValue.value = value
		emit('change', value)
	}

	// 不支持 ...toRefs()
	provide(radioGroupInjectKey, {
		modelValue,
		disabled: toRef<boolean>(() => props.disabled),
		readonly: toRef<boolean>(() => props.readonly),
		direction: toRef<RadioDirection>(() => props.direction),
		iconPosition: toRef<RadioIconPosition>(() => props.iconPosition),
		spaceBetween: toRef<boolean>(() => props.spaceBetween),
		iconSize: toRef<string | number | null>(() => props.iconSize),
		labelSize: toRef<string | number | null>(() => props.labelSize),
		labelColor: toRef<string | null>(() => props.labelColor),
		checkedColor: toRef<string | null>(() => props.checkedColor),
		shape: toRef<RadioShape>(() => props.shape),
		updateValue,
	} as RadioGroupProvide)


	const radioGroupClass = computed(() => {
		return [
			ns.b(""),
			ns.m(props.direction),
		]
	})
</script>

<style scoped lang="scss">
	.rice-radio-group {
		flex-direction: column;

		&--row {
			flex-direction: row;
			flex-wrap: wrap;
		}
	}
</style>