<template>
	<text v-if="!isImage" class="rice-icon" :class="iconClass" :style="[iconStyle,customStyle]" @tap="iconClick">
		<slot>{{iconCode}}</slot>
	</text>
	<image v-else :src="name" class="rice-icon__image" :style="[imageStyle,customStyle]" @tap="iconClick"></image>
</template>

<script setup>
	/**
	 * rice-icon 基于字体的图标集
	 * @property {String} name 图标的名称
	 * @property {String|Number} size 图标大小，默认16px
	 * @property {String} color 图标的颜色
	 * @property {Boolean} bold 是否加粗
	 * @property {Boolean} stop 是否阻止事件冒泡
	 * @property {String} fontFamily 自定义图标的字体
	 * @property {Object} customStyle 自定义style样式
	 * @property {String} customClass 自定义class样式
	 */

	import { addUnit, hasStrValue, isThemeColor } from '../../libs/utils';
	import { useNamespace } from "../../libs/use";
	import { IconProps, fontData } from './index.uts';

	defineOptions({
		name: 'rice-icon'
	})

	const ns = useNamespace('icon')

	const emit = defineEmits<{
		click : [e: UniPointerEvent]
	}>()

	const props = withDefaults(defineProps<IconProps>(), {
		name: "",
		stop: false,
		customStyle: () : UTSJSONObject => ({})
	})

	const isBase64 = () => {
		return props.name.indexOf('data:') > -1 && props.name.indexOf('base64') > -1;
	}

	const isImage = computed<boolean>(() => props.name.includes('/') || isBase64())

	const iconCode = computed(() => {
		if (props.fontFamily != null) return String.fromCharCode(parseInt(props.name, 16))
		return fontData.find(v => v.name == props.name)?.code ?? ""
	})

	const iconClick = (e : UniPointerEvent) => {
		if (props.stop == true) {
			e.stopPropagation()
		}
		emit('click', e)
	}

	const iconStyle = computed(() => {
		const css = new Map<string, string>()
		if (props.size != null) css.set('font-size', addUnit(props.size!))
		if (hasStrValue(props.color)) css.set('color', props.color!)
		if (props.fontFamily != null) css.set('font-family', props.fontFamily)
		return css
	})

	const imageStyle = computed(() => {
		const css = new Map<string, string>()
		if (hasStrValue(props.size)) {
			const size = addUnit(props.size!)
			css.set('height', addUnit(size))
			css.set('width', addUnit(size))
		}
		return css
	})

	const iconClass = computed(() => {
		const basic = [
			ns.theme(),
			ns.is('bold', props.bold ?? false),
			props.customClass ?? "",
		]

		return basic
	})
</script>

<style scoped lang="scss">
	@font-face {
		font-family: riceIcon;
		src: url('../../static/font/riceIcons.ttf');
	}

	.rice-icon {
		color: var(--rice-text-color-2);
		font-family: riceIcon;

		&--bold {
			font-weight: bold;
		}

		&__image {
			height: 16px;
			width: 16px;
		}
	}
</style>