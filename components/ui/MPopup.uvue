<template>
	<view
		class="m-popup-container"
		:class="`${direction}`"
		v-show="visible"
		@touchmove.stop.prevent
	>
		<view
			class="m-popup-mask"
			:class="{
				'is-open': status == 1,
				'is-close': status == 2
			}"
			@tap="maskClose"
			v-if="showMask"
		></view>
		<view
			class="m-popup"
			:class="[
				{
					'is-open': status == 1,
					'is-close': status == 2,
					'stop-transition': swipe.isTouch
				}
			]"
			:style="popupStyle"
			@touchstart="onTouchStart"
			@touchmove="onTouchMove"
			@touchend="onTouchEnd"
			@touchcancel="onTouchEnd"
		>
			<slot></slot>
		</view>
	</view>
</template>

<script setup lang="uts">
// 组件属性定义
const props = defineProps({
	// 是否可见
	modelValue: {
		type: Boolean,
		default: false
	},
	// 弹出方向
	direction: {
		type: String,
		default: "bottom"
	},
	// 弹出框宽度
	size: {
		type: String,
		default: "30%"
	},
	// 是否显示遮罩层
	showMask: {
		type: Boolean,
		default: true
	},
	// 是否点击遮罩层关闭弹窗
	maskClosable: {
		type: Boolean,
		default: true
	},
	// 拖拽关闭的阈值
	swipeCloseThreshold: {
		type: Number,
		default: 150
	}
});

// 定义组件事件
const emit = defineEmits(["update:modelValue", "open", "opened", "close", "closed", "maskClose"]);

// 控制弹出层显示/隐藏
const visible = ref(false);

// 0: 初始状态 1: 打开中 2: 关闭中
const status = ref(0);

// 标记弹出层是否处于打开状态(包含动画过程)
const isOpen = ref(false);

// 标记弹出层是否已完全打开(动画结束)
const isOpened = ref(false);

// 计算弹出层高度
const height = computed(() => {
	switch (props.direction) {
		case "top":
		case "bottom":
			return props.size; // 顶部和底部弹出时使用传入的size
		case "left":
		case "right":
			return "100%"; // 左右弹出时占满全高
		default:
			return "";
	}
});

// 计算弹出层宽度
const width = computed(() => {
	switch (props.direction) {
		case "top":
		case "bottom":
			return "100%"; // 顶部和底部弹出时占满全宽
		case "left":
		case "right":
		case "center":
			return props.size; // 其他方向使用传入的size
		default:
			return "";
	}
});

// 动画定时器
let timer: number = 0;

// 打开弹出层
function open() {
	if (!visible.value) {
		// 显示弹出层
		visible.value = true;
		// 触发事件
		emit("update:modelValue", true);
		emit("open");
		// 等待DOM更新后开始动画
		setTimeout(
			() => {
				// 设置打开状态
				status.value = 1;
				// 动画结束后触发opened事件
				timer = setTimeout(() => {
					isOpened.value = true;
					emit("opened");
				}, 350);
			},50
		);
	}
}

// 关闭弹出层
function close() {
	if (status.value == 1) {
		// 重置打开状态
		isOpened.value = false;
		// 设置关闭状态
		status.value = 2;
		// 触发事件
		emit("close");
		// 清除未完成的定时器
		if (timer != 0) {
			clearTimeout(timer);
		}
		// 动画结束后隐藏弹出层
		timer = setTimeout(() => {
			// 隐藏弹出层
			visible.value = false;
			// 重置状态
			status.value = 0;
			// 触发事件
			emit("update:modelValue", false);
			emit("closed");
		}, 350);
	}
}

// 点击遮罩层关闭
function maskClose() {
	if (props.maskClosable) {
		close();
	}
	emit("maskClose");
}
// 滑动状态类型定义
type Swipe = {
	isMove: boolean; // 是否移动
	isTouch: boolean; // 是否处于触摸状态
	startY: number; // 开始触摸的Y坐标
	offsetY: number; // Y轴偏移量
};

// 初始化滑动状态数据
const swipe = reactive<Swipe>({
	isMove: false, // 是否移动
	isTouch: false, // 默认非触摸状态
	startY: 0, // 初始Y坐标为0
	offsetY: 0 // 初始偏移量为0
});

/**
 * 触摸开始事件处理
 * @param e 触摸事件对象
 * 当弹出层获得焦点且允许滑动关闭时,记录触摸起始位置
 */
function onTouchStart(e: UniTouchEvent) {
	if (props.direction != "bottom") {
		return;
	}
	if (isOpened.value) {
		swipe.isTouch = true; // 标记开始触摸
		swipe.startY = e.touches[0].clientY; // 记录起始Y坐标
	}
}

/**
 * 触摸移动事件处理
 * @param e 触摸事件对象
 * 计算手指移动距离,更新弹出层位置
 */
function onTouchMove(e: UniTouchEvent) {
	if (swipe.isTouch) {
		// 标记为移动状态
		swipe.isMove = true;
		// 计算Y轴偏移量
		const offsetY = (e.touches[0] as UniTouch).pageY - swipe.startY;
		// 只允许向下滑动(offsetY > 0)
		if (offsetY > 0) {
			swipe.offsetY = offsetY;
		}
	}
}

/**
 * 触摸结束事件处理
 * 根据滑动距离判断是否关闭弹出层
 */
function onTouchEnd() {
	if (swipe.isTouch) {
		// 结束触摸状态
		swipe.isTouch = false;
		// 结束移动状态
		swipe.isMove = false;
		// 如果滑动距离超过阈值,则关闭弹出层
		if (swipe.offsetY > props.swipeCloseThreshold) {
			close();
		}
		// 重置偏移量
		swipe.offsetY = 0;
	}
}

/**
 * 计算弹出层样式
 * 根据滑动状态动态设置transform属性实现位移动画
 */
const popupStyle = computed(() => {
	const style = {};
	// 基础样式
	style["height"] = height.value;
	style["width"] = width.value;
	// 处于触摸状态时添加位移效果
	if (swipe.isTouch) {
		style["transform"] = `translateY(${swipe.offsetY}px)`;
	}
	return style;
});

// 监听modelValue变化
watch(
	computed(() => props.modelValue),
	(val: boolean) => {
		if (val) {
			open();
		} else {
			close();
		}
	},
	{
		immediate: true
	}
);

// 监听状态变化
watch(status, (val: number) => {
	isOpen.value = val == 1;
});

defineExpose({
	isOpened,
	isOpen,
	open,
	close
});
</script>

<style lang="scss" scoped>
.m-popup-container {
	width: 100%;
	height: 100%;
	position: fixed;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	pointer-events: auto;

	.m-popup-mask {
		width: 100%;
		height: 100%;
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		background-color: #000000;
		opacity: 0;
		transition-property: opacity;

		&.is-open {
			opacity: 0.4;
		}

		&.is-open,
		&.is-close {
			transition-duration: 0.3s;
		}
	}

	.m-popup {
		position: absolute;
		width: 100%;
		height: 100%;
		background-color: #fff;
		transition-duration: 0.3s;
		transition-property: transform;

		&.stop-transition {
			transition: none;
		}
	}

	&.left {
		.m-popup {
			left: 0;
			top: 0;
			transform: translateX(-100%);

			&.is-open {
				transform: translateX(0);
			}
		}
	}

	&.right {
		.m-popup {
			right: 0;
			top: 0;
			transform: translateX(100%);

			&.is-open {
				transform: translateX(0);
			}
		}
	}

	&.top {
		.m-popup {
			left: 0;
			top: 0;
			transform: translateY(-100%);

			&.is-open {
				transform: translateY(0);
			}
		}
	}

	&.bottom {
		& .m-popup {
			left: 0;
			bottom: 0;
			transform: translateY(100%);

			&.is-open {
				transform: translateY(0);
			}

			&.is-close {
				transform: translateY(100%);
			}
		}
	}

	&.center {
		align-items: center;
		justify-content: center;

		&.m-popup {
			transform: scale(1.3);
			opacity: 0;
			transition-property: transform, opacity;
			&.is-open {
				transform: translate(0, 0) scale(1);
				opacity: 1;
			}
		}
	}
}
</style>
