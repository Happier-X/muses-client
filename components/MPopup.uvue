<template>
    <view class="size-full fixed top-0 right-0 bottom-0 left-0 pointer-events-none z-[999]" :style="{pointerEvents:'auto'}" v-show="visible" @touchmove.stop.prevent>
				<view class="size-full absolute top-0 right-0 bottom-0 left-0 bg-black opacity-0 transition-opacity" :class="{ 'opacity-40': status == 1 }" @tap="maskClose"></view>
				<view class="absolute bottom-0 transition-transform bg-white" :class="{ 'translate-y-0': status == 1,'translate-y-full': status == 2}"
					:style="popupStyle"
					@touchstart="onTouchStart"
					@touchmove="onTouchMove"
					@touchend="onTouchEnd"
					@touchcancel="onTouchEnd">
					<view :style="{ paddingBottom }">
						<view>
							<slot></slot>
						</view>
					</view>
				</view>
			</view>
</template>
<script setup lang="uts">

// 组件属性定义
const props = defineProps({
	// 是否可见
	modelValue: {
		type: Boolean,
		default: false
	}
});

// 定义组件事件
const emit = defineEmits(["update:modelValue", "open", "opened", "close", "closed", "maskClose"]);

// 控制弹出层显示/隐藏
const visible = ref(false);

// 0: 初始状态 1: 打开中 2: 关闭中
const status = ref(0);

// 标记弹出层是否处于打开状态(包含动画过程)
const isOpen = ref(false);

// 标记弹出层是否已完全打开(动画结束)
const isOpened = ref(false);

// 弹出层z-index值
const zIndex = ref(1000);

// 计算弹出层高度
const height = ref("200px");

// 计算弹出层宽度
const width = ref("100%")

// 底部安全距离
const paddingBottom = computed(() => {
	let h = 0;
	h += 20;
	return h + "px";
});

// 动画定时器
let timer: number = 0;

// 打开弹出层
function open() {
	if (!visible.value) {
		// 显示弹出层
		visible.value = true;
		// 触发事件
		emit("update:modelValue", true);
		emit("open");
		// 等待DOM更新后开始动画
		setTimeout(
			() => {
				// 设置打开状态
				status.value = 1;
				// 动画结束后触发opened事件
				// @ts-ignore
				timer = setTimeout(() => {
					isOpened.value = true;
					emit("opened");
				}, 350);
			},
		);
	}
}

// 关闭弹出层
function close() {
	if (status.value == 1) {
		// 重置打开状态
		isOpened.value = false;

		// 设置关闭状态
		status.value = 2;

		// 触发事件
		emit("close");

		// 清除未完成的定时器
		if (timer != 0) {
			clearTimeout(timer);
		}

		// 动画结束后隐藏弹出层
		// @ts-ignore
		timer = setTimeout(() => {
			// 隐藏弹出层
			visible.value = false;

			// 重置状态
			status.value = 0;

			// 触发事件
			emit("update:modelValue", false);
			emit("closed");
		}, 350);
	}
}

// 点击遮罩层关闭
function maskClose() {
	close();
}

type Swipe = {
	isTouch: false, // 是否正在触摸
	isMove: false, // 是否正在移动
	startY: 0, // 触摸起始Y坐标
	offsetY: 0, // 滑动偏移量
}

const swipe = ref<Swipe>({
		isTouch: false, // 是否正在触摸
		isMove: false, // 是否正在移动
		startY: 0, // 触摸起始Y坐标
		offsetY: 0, // 滑动偏移量
	});

/**
 * 触摸开始事件处理
 * @param e 触摸事件对象
 * 当弹出层获得焦点且允许滑动关闭时,记录触摸起始位置
 */
function onTouchStart(e: UniTouchEvent) {
	// if (isOpened.value) {
		swipe.value.isTouch = true; // 标记开始触摸
		swipe.value.startY = e.touches[0].clientY; // 记录起始Y坐标
	// }
}

/**
 * 触摸移动事件处理
 * @param e 触摸事件对象
 * 计算手指移动距离,更新弹出层位置
 */
function onTouchMove(e: UniTouchEvent) {
	if (swipe.value.isTouch) {
		// 标记为移动状态
		swipe.value.isMove = true;

		// 计算Y轴偏移量
		const offsetY = (e.touches[0] as UniTouch).pageY - swipe.value.startY;

		// 只允许向下滑动(offsetY > 0)
		if (offsetY > 0) {
			swipe.value.offsetY = offsetY;
		}
	}
}

/**
 * 触摸结束事件处理
 * 根据滑动距离判断是否关闭弹出层
 */
function onTouchEnd() {
	if (swipe.value.isTouch) {
		// 结束触摸状态
		swipe.value.isTouch = false;

		// 结束移动状态
		swipe.value.isMove = false;

		// 如果滑动距离超过阈值,则关闭弹出层
		if (swipe.value.offsetY > 50) {
			close();
		}

		// 重置偏移量
		swipe.value.offsetY = 0;
	}
}

/**
 * 计算弹出层样式
 * 根据滑动状态动态设置transform属性实现位移动画
 */
const popupStyle = computed(() => {
	const style = {};

	// 基础样式
	style["height"] = height.value;
	style["width"] = width.value;

	// 处于触摸状态时添加位移效果
	if (swipe.value.isTouch) {
		style["transform"] = `translateY(${swipe.value.offsetY}px)`;
	}

	return style;
});

// 监听modelValue变化
watch(
	computed(() => props.modelValue),
	(val: boolean) => {
		if (val) {
			open();
		} else {
			close();
		}
	},
	{
		immediate: true
	}
);

defineExpose({
	isOpened,
	isOpen,
	open,
	close
});
</script>