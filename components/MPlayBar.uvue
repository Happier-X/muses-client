<template>
    <view class="flex-row items-center justify-between pt-[8px] px-[16px] pb-[16px]" @tap="handleShowImmersion()">
        <image class="size-[48px] rounded-[8px]" :src="`${serviceUrl}${playerCurrentSongDetail?.cover}`"></image>
        <view class="px-[16px] flex-1">
            <text class="font-bold">{{ playerCurrentSongDetail?.title }}</text>
            <text class="font-normal">{{ playerCurrentSongDetail?.artist }}</text>
        </view>
        <m-icon :name="playerIsPlaying ? '&#xf0f6;' : '&#xf148;'" class="pr-[16px] text-[24px]" @tap.stop="playerIsPlaying ? playerPause() : playerPlay()"></m-icon>
        <m-icon name="&#xefb4;" class="text-[24px]" @tap.stop="handleShowPlayQueue()"></m-icon>
    </view>
    <m-immersion ref="immersionRef"></m-immersion>
    <m-play-queue ref="playQueueRef"></m-play-queue>
</template>

<script setup lang="uts">
import MIcon from '@/components/MIcon.uvue'
import MImmersion from '@/components/MImmersion.uvue'
import MPlayQueue from '@/components/MPlayQueue.uvue'
import { playerCurrentSongDetail, playerIsPlaying, playerPause, playerPlay } from '@/stores/player'

const serviceUrl = computed(()=>uni.getStorageSync("serviceUrl") ?? "")
const instance = getCurrentInstance()!.proxy!
const handleShowImmersion = () => {
    (instance.$refs['immersionRef'] as ComponentPublicInstance)?.$callMethod('show')
}
const handleShowPlayQueue = ()=>{
    (instance.$refs['playQueueRef'] as ComponentPublicInstance)?.$callMethod('show')
}
</script>